// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pos.proto

#include "pos.pb.h"
#include "pos.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace pos {

static const char* PosServicer_method_names[] = {
  "/pos.PosServicer/EasyCall",
  "/pos.PosServicer/PosCall",
};

std::unique_ptr< PosServicer::Stub> PosServicer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PosServicer::Stub> stub(new PosServicer::Stub(channel, options));
  return stub;
}

PosServicer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EasyCall_(PosServicer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PosCall_(PosServicer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PosServicer::Stub::EasyCall(::grpc::ClientContext* context, const ::pos::EasyCallRequest& request, ::pos::EasyCallReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos::EasyCallRequest, ::pos::EasyCallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EasyCall_, context, request, response);
}

void PosServicer::Stub::async::EasyCall(::grpc::ClientContext* context, const ::pos::EasyCallRequest* request, ::pos::EasyCallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos::EasyCallRequest, ::pos::EasyCallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyCall_, context, request, response, std::move(f));
}

void PosServicer::Stub::async::EasyCall(::grpc::ClientContext* context, const ::pos::EasyCallRequest* request, ::pos::EasyCallReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EasyCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos::EasyCallReply>* PosServicer::Stub::PrepareAsyncEasyCallRaw(::grpc::ClientContext* context, const ::pos::EasyCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos::EasyCallReply, ::pos::EasyCallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EasyCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos::EasyCallReply>* PosServicer::Stub::AsyncEasyCallRaw(::grpc::ClientContext* context, const ::pos::EasyCallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEasyCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosServicer::Stub::PosCall(::grpc::ClientContext* context, const ::pos::PosRequest& request, ::pos::PosReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pos::PosRequest, ::pos::PosReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PosCall_, context, request, response);
}

void PosServicer::Stub::async::PosCall(::grpc::ClientContext* context, const ::pos::PosRequest* request, ::pos::PosReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pos::PosRequest, ::pos::PosReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PosCall_, context, request, response, std::move(f));
}

void PosServicer::Stub::async::PosCall(::grpc::ClientContext* context, const ::pos::PosRequest* request, ::pos::PosReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PosCall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pos::PosReply>* PosServicer::Stub::PrepareAsyncPosCallRaw(::grpc::ClientContext* context, const ::pos::PosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pos::PosReply, ::pos::PosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PosCall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pos::PosReply>* PosServicer::Stub::AsyncPosCallRaw(::grpc::ClientContext* context, const ::pos::PosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPosCallRaw(context, request, cq);
  result->StartCall();
  return result;
}

PosServicer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosServicer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosServicer::Service, ::pos::EasyCallRequest, ::pos::EasyCallReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosServicer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos::EasyCallRequest* req,
             ::pos::EasyCallReply* resp) {
               return service->EasyCall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosServicer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosServicer::Service, ::pos::PosRequest, ::pos::PosReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosServicer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pos::PosRequest* req,
             ::pos::PosReply* resp) {
               return service->PosCall(ctx, req, resp);
             }, this)));
}

PosServicer::Service::~Service() {
}

::grpc::Status PosServicer::Service::EasyCall(::grpc::ServerContext* context, const ::pos::EasyCallRequest* request, ::pos::EasyCallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosServicer::Service::PosCall(::grpc::ServerContext* context, const ::pos::PosRequest* request, ::pos::PosReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pos

